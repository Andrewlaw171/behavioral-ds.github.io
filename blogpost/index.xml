<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Behavioral Data Science</title><link>https://www.behavioral-ds.ml/blogpost/</link><atom:link href="https://www.behavioral-ds.ml/blogpost/index.xml" rel="self" type="application/rss+xml"/><description>Behavioral Data Science</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>2021</copyright><lastBuildDate>Thu, 03 Dec 2020 00:00:00 +0000</lastBuildDate><image><url>https://www.behavioral-ds.ml/img/logo.png</url><title>Behavioral Data Science</title><link>https://www.behavioral-ds.ml/blogpost/</link></image><item><title>User Analysis on reshare cascades about COVID-19</title><link>https://www.behavioral-ds.ml/blogpost/user_analysis/</link><pubDate>Thu, 03 Dec 2020 00:00:00 +0000</pubDate><guid>https://www.behavioral-ds.ml/blogpost/user_analysis/</guid><description>&lt;p>We demonstrate in this blog post a tutorial on applying the tools for analyzing online information diffusions about Twitter users, &lt;a href="https://github.com/behavioral-ds/BirdSpotter">&lt;code>birdspotter&lt;/code>&lt;/a> and &lt;a href="https://github.com/behavioral-ds/evently">&lt;code>evently&lt;/code>&lt;/a>.&lt;/p>
&lt;h2 id="dataset">Dataset&lt;/h2>
&lt;p>In this tutorial, we apply two tools for analyzing Twitter users, on a COVID-19 retweet dataset. The dataset
is curated by Chen, et al. One can obtain a copy of the tweet IDs from
their &lt;a href="https://github.com/echen102/COVID-19-TweetIDs">project&lt;/a>. We
only use the 31st of Janury sample of the whole dataset for
demonstration purpose. The tweets can be recovered by &lt;code>hydration&lt;/code>
from their IDs. We note that some tweets might have been deleted and in
the end we manage to get 69.2% (1,489,877) of the original tweets.&lt;/p>
&lt;h2 id="tools">Tools&lt;/h2>
&lt;p>While &lt;code>BirdSpotter&lt;/code> captures the social influence and botness of Twitter
users, &lt;code>evently&lt;/code> specifically models the temporal dynamics of online
information diffusion. We leverage information provided by the tools to
study the users in the COVID19 dataset.&lt;/p>
&lt;pre>&lt;code class="language-r">library(evently)
library(reticulate)
birdspotter &amp;lt;- import('birdspotter')
&lt;/code>&lt;/pre>
&lt;h2 id="preprocessing-tweets">Preprocessing tweets&lt;/h2>
&lt;p>At this step, we seek to extract diffusion cascades from the &lt;code>COVID-19&lt;/code>
dataset for analyzing user influence and botness. A diffusion cascade
consist of an initial tweet posted by a Twitter user and followed then
by a sereis of retweets. A function provided by &lt;code>evently&lt;/code> allows one to
obtain cascades from JSON formatted raw tweets. On the other hand, we
initialize a &lt;code>BirdSpotter&lt;/code> instance and compute the influence and
botness scores for all users in the
dataset.&lt;/p>
&lt;pre>&lt;code class="language-r">cascades &amp;lt;- parse_raw_tweets_to_cascades('corona_2020_01_31.jsonl', keep_user = T, keep_absolute_time = T)
bs &amp;lt;- birdspotter$BirdSpotter('corona_2020_01_31.jsonl')
labeled_users &amp;lt;- bs$getLabeledUsers()[, c('user_id', 'botness', 'influence')]
&lt;/code>&lt;/pre>
&lt;p>As we cannot publish &lt;code>corona_2020_01_31.jsonl&lt;/code> due to Twitter TOC, we
have stored the results and load them below&lt;/p>
&lt;pre>&lt;code class="language-r">load('corona_2020_01_31.rda')
labeled_users &amp;lt;- read.csv('corona_31_botness_influence.csv', stringsAsFactors = F,
colClasses=c(&amp;quot;character&amp;quot;,rep(&amp;quot;numeric&amp;quot;,3)))
&lt;/code>&lt;/pre>
&lt;p>We note that all user IDs have been encrypted. After obtaining the
results, let’s first conduct some simple measurements on users and
cascades.&lt;/p>
&lt;pre>&lt;code class="language-r">library(ggplot2)
# check the density of these two values
mean_bot &amp;lt;- mean(labeled_users$botness, na.rm = T)
ggplot(labeled_users, aes(botness)) +
stat_density(geom = 'line') +
geom_vline(xintercept = mean_bot, linetype=2, color = 'red') +
geom_text(data=data.frame(), aes(x = mean_bot, y = 2, label= sprintf('mean: %s', round(mean_bot, 2))), color= 'red', angle=90, vjust=-0.11)
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="README_files/figure-gfm/unnamed-chunk-4-1.png" alt="">&lt;!-- -->&lt;/p>
&lt;pre>&lt;code class="language-r">mean_inf &amp;lt;- mean(labeled_users$influence)
ggplot(labeled_users) +
stat_ecdf(aes(influence, 1 - ..y..)) +
scale_x_log10() +
scale_y_log10() +
ylab('CCDF') +
geom_vline(xintercept = mean_inf, linetype=2, color = 'red') +geom_text(data=data.frame(), aes(x = mean_inf, y = 1e-3, label= sprintf('mean: %s', round(mean_inf, 2))), color= 'red', angle=90, vjust=-0.11)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Warning: Transformation introduced infinite values in continuous y-axis
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="README_files/figure-gfm/unnamed-chunk-4-2.png" alt="">&lt;!-- -->&lt;/p>
&lt;pre>&lt;code class="language-r">mean_value &amp;lt;- mean(sapply(cascades, nrow))
ggplot(data.frame(size = sapply(cascades, nrow))) +
stat_ecdf(aes(size, 1 - ..y..)) +
scale_x_log10() + scale_y_log10() +
geom_vline(xintercept = mean_value, linetype=2, color = 'red') +
geom_text(data=data.frame(), aes(x = mean_value, y = 1e-3, label= sprintf('mean: %s', round(mean_value, 2))), color= 'red', angle=90, vjust=-0.11) +
xlab('cascade size') +
ylab('CCDF')
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Warning: Transformation introduced infinite values in continuous y-axis
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="README_files/figure-gfm/unnamed-chunk-4-3.png" alt="">&lt;!-- -->&lt;/p>
&lt;pre>&lt;code class="language-r">mean_value2 &amp;lt;- mean(sapply(cascades, function(c) c$time[nrow(c)]))
ggplot(data.frame(time = sapply(cascades, function(c) c$time[nrow(c)]))) +
stat_ecdf(aes(time, 1 - ..y..)) +
scale_x_continuous(trans = 'log1p', breaks = c(0, 100, 10000, 1000000), labels = c('0', '1e2', '1e4', '1e6')) +
scale_y_log10() +
geom_vline(xintercept = mean_value2, linetype=2, color = 'red') +
geom_text(data=data.frame(), aes(x = mean_value2, y = 1e-3, label= sprintf('mean: %s', round(mean_value2, 2))), color= 'red', angle=90, vjust=-0.11) +
xlab('cascade final event time')+
ylab('CCDF')
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Warning: Transformation introduced infinite values in continuous y-axis
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="README_files/figure-gfm/unnamed-chunk-4-4.png" alt="">&lt;!-- -->&lt;/p>
&lt;pre>&lt;code class="language-r">mean_value &amp;lt;- mean(labeled_users$activity)
ggplot(data.frame(size = labeled_users$activity)) +
stat_ecdf(aes(size, 1 - ..y..)) +
scale_x_log10() +
scale_y_log10() +
geom_vline(xintercept = mean_value, linetype=2, color = 'red') +
geom_text(data=data.frame(), aes(x = mean_value, y = 1e-3, label= sprintf('mean: %s', round(mean_value, 2))), color= 'red', angle=90, vjust=-0.11) + xlab('user activity')+ ylab('CCDF')
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Warning: Transformation introduced infinite values in continuous y-axis
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="README_files/figure-gfm/unnamed-chunk-4-5.png" alt="">&lt;!-- -->&lt;/p>
&lt;h2 id="retrain-the-bot-detector">Retrain the bot detector&lt;/h2>
&lt;p>If one find the botness scores are not accurate, &lt;code>birdspotter&lt;/code> provides
a relabeling tool and a retrain API to learn from the given relabeled
dataset&lt;/p>
&lt;pre>&lt;code class="language-r"># output a file for mannual labeling
bs$getBotAnnotationTemplate('users_to_label.csv')
# Once annotated the botness detector can be trained with
bs$trainClassifierModel('users_to_label.csv')
&lt;/code>&lt;/pre>
&lt;h2 id="fit-user-posted-cacsades-with-evently">Fit user posted cacsades with &lt;code>evently&lt;/code>&lt;/h2>
&lt;p>We model a group of cascades initiated by a particular user jointly and
treat the fitted model as a characterization of the user. In this
example, we select two users for comparison.&lt;/p>
&lt;pre>&lt;code class="language-r">selected_users &amp;lt;- c('369686755237813560', '174266868073402929')
# fit Hawkes process on cascades initiated by the selected users
user_cascades_fitted &amp;lt;- lapply(selected_users, function(user) {
# select cascades that are initiated by the &amp;quot;selected_user&amp;quot;
selected_cascades &amp;lt;- Filter(function(cascade) cascade$user[[1]] == user, cascades)
# obtain the observation times;
# note 1580515200 is 1st Feb when the observation stopped
# as we only observed until the end of 31st Jan
times &amp;lt;- 1580515200 - sapply(selected_cascades, function(cas) cas$absolute_time[1])
# fit a model on the selected cascades;
fit_series(data = selected_cascades, model_type = 'mPL', observation_time = times, cores = 10)
})
user_cascades_SEISMIC_fitted &amp;lt;- lapply(selected_users, function(user) {
selected_cascades &amp;lt;- Filter(function(cascade) cascade$user[[1]] == user, cascades)
times &amp;lt;- 1580515200 - sapply(selected_cascades, function(cas) cas$absolute_time[1])
fit_series(data = selected_cascades, model_type = 'SEISMIC',
observation_time = times)
})
# check the fitted kernel functions
plot_kernel_function(user_cascades_fitted) +
scale_color_discrete(labels = c(&amp;quot;@BobOngHugots&amp;quot;, &amp;quot;@Jaefans_Global&amp;quot;))
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="README_files/figure-gfm/unnamed-chunk-6-1.png" alt="">&lt;!-- -->&lt;/p>
&lt;p>The plot shows the fitted kernel functions of these two users which
reflect their time-decaying influence of attracting followers to reshare
their posts. We then demonstrate how to simulate new cascades&lt;/p>
&lt;pre>&lt;code class="language-r">set.seed(134841)
user_magnitude &amp;lt;- Filter(function(cascade) cascade$user[[1]] == selected_users[[1]], cascades)[[1]]$magnitude[1]
# simulate a new cascade from @BobOngHugots
sim_cascade &amp;lt;- generate_series(user_cascades_fitted[[1]], M = user_magnitude)
plot_event_series(cascade = sim_cascade, model = user_cascades_fitted[[1]])
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="README_files/figure-gfm/unnamed-chunk-7-1.png" alt="">&lt;!-- -->&lt;/p>
&lt;pre>&lt;code class="language-r">selected_cascade &amp;lt;- Filter(function(cascade) cascade$user[1] == selected_users[[1]], cascades)[[1]]
selected_time &amp;lt;- user_cascades_fitted[[1]]$observation_time[1]
# simulate a cascade with a &amp;quot;selected_cascade&amp;quot; from @BobOngHugots
sim_cascade &amp;lt;- generate_series(user_cascades_fitted[[1]], M = user_magnitude,
init_history = selected_cascade)
sprintf('%s new events simulated after cascade',
nrow(sim_cascade[[1]]) - nrow(selected_cascade))
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## [1] &amp;quot;25 new events simulated after cascade&amp;quot;
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">predict_final_popularity(user_cascades_fitted[[1]],
selected_cascade, selected_time)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## [1] 458.303
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r"># predict with SEISMIC model, assume we have fitted the SEISMIC model
predict_final_popularity(user_cascades_SEISMIC_fitted[[1]],
selected_cascade, selected_time)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## [1] 729.923
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">get_branching_factor(user_cascades_fitted[[1]])
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## [1] 0.7681281
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">get_viral_score(user_cascades_fitted[[1]])
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## [1] 7.407763
&lt;/code>&lt;/pre>
&lt;h2 id="visualize-users-in-a-latent-space">Visualize users in a latent space&lt;/h2>
&lt;p>We show a visualization of top 300 users posted most tweets using the
features returned by &lt;code>evently&lt;/code> along with the botness and influence
scores from &lt;code>birdspotter&lt;/code>.&lt;/p>
&lt;pre>&lt;code class="language-r"># obtain observation times here again
times &amp;lt;- 1580515200 - sapply(cascades, function(cas) cas$absolute_time[1])
# indicate the grouping of each cascade with the user who started the cascade
names(cascades) &amp;lt;- sapply(cascades, function(cas) cas$user[1])
# fit Hawkes processes on all cascades first
fitted_corona &amp;lt;- group_fit_series(cascades, model_type = 'mPL', observation_time = times)
&lt;/code>&lt;/pre>
&lt;p>The fitting procedure takes quite long so we again load the pre-fitted
models here&lt;/p>
&lt;pre>&lt;code class="language-r">load('fitted_models.rda')
# choose the top 300 users who started most cacsades
selected_users &amp;lt;- labeled_users$user_id[labeled_users$user_id %in%
names(sort(sapply(fitted_corona, length), decreasing = T)[seq(300)])]
# gather the stats for these users
user_influences &amp;lt;- labeled_users$influence[labeled_users$user_id %in% selected_users]
user_botness &amp;lt;- labeled_users$botness[labeled_users$user_id %in% selected_users]
fitted_corona_selected &amp;lt;- fitted_corona[selected_users]
# get the features
features &amp;lt;- generate_features(fitted_corona_selected)
# compute distances between users using manhattan distance
features &amp;lt;- features[, -1] # remove the user id column
distances &amp;lt;- dist(features, method = 'manhattan')
library(tsne)
positions &amp;lt;- tsne(distances, k = 2)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## sigma summary: Min. : 0.34223375605395 |1st Qu. : 0.457223801885988 |Median : 0.489891425900637 |Mean : 0.500483006369232 |3rd Qu. : 0.538593613780411 |Max. : 0.676779919259545 |
## Epoch: Iteration #100 error is: 14.1961110881254
## Epoch: Iteration #200 error is: 0.490122133064818
## Epoch: Iteration #300 error is: 0.474257867010761
## Epoch: Iteration #400 error is: 0.472067779170087
## Epoch: Iteration #500 error is: 0.471844181155159
## Epoch: Iteration #600 error is: 0.471798834134577
## Epoch: Iteration #700 error is: 0.471783207059971
## Epoch: Iteration #800 error is: 0.471632929621924
## Epoch: Iteration #900 error is: 0.47087861882558
## Epoch: Iteration #1000 error is: 0.470873765976829
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">df &amp;lt;- data.frame(x = positions[,1], y = positions[,2],
influence = user_influences, botness = user_botness)
df &amp;lt;- cbind(df, data.frame(botornot = ifelse(df$botness &amp;gt; 0.6, 'Bot', 'Not Bot')))
ggplot(df, aes(x, y, color = influence, shape = botornot, size = botornot)) +
geom_point() +
scale_shape_manual(values = c(15,1)) +
scale_size_manual(values = c(1.5, 1.2)) +
scale_color_gradient(low = '#56B1F7', high = '#132B43', trans = 'log10') +
theme_void() + labs(size = NULL, shape = NULL) +
theme(legend.direction = 'horizontal', legend.position = c(0.8, 0.2),
legend.key.size = unit(.3, 'cm'), legend.text = element_text(size = 6),
legend.title = element_text(size = 6), legend.spacing = unit(.05, 'cm'))
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="README_files/figure-gfm/unnamed-chunk-10-1.png" alt="">&lt;!-- -->&lt;/p></description></item><item><title>Causal Inference: A basic taster</title><link>https://www.behavioral-ds.ml/blogpost/causal_inference_taster/</link><pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate><guid>https://www.behavioral-ds.ml/blogpost/causal_inference_taster/</guid><description>
&lt;script src="index_files/header-attrs/header-attrs.js">&lt;/script>
&lt;link href="index_files/anchor-sections/anchor-sections.css" rel="stylesheet" />
&lt;script src="index_files/anchor-sections/anchor-sections.js">&lt;/script>
&lt;link rel="stylesheet" href="tufte.css" type="text/css" />
&lt;p>Most statistics students will be familiar with the phrase “correlation isn’t causation,” however, this doesn’t feature strongly in the remainder of their educations. To overcome this hurdle, the researchers’ best practice in experimental design is the randomized controlled trial. However, there are only specific experiments that we can perform. For example, to test the whether smoking causes cancer, we can’t force subjects to smoke. &lt;label for="tufte-mn-" class="margin-toggle">⊕&lt;/label>&lt;input type="checkbox" id="tufte-mn-" class="margin-toggle">&lt;span class="marginnote">In the 1950s the tobacco companies argued that there could be some confounding factor (a gene) which smokers and lung cancer patients shared.&lt;/span> In general, restricting ourselves to experimental studies to determine causation is incredibly limiting (especially for data scientists). We want to make the same causal conclusions from observational studies and those from experimental studies. We can do that by studying causal inference.&lt;/p>
&lt;div id="simpsons" class="section level2">
&lt;h2>Simpson’s Paradox&lt;/h2>
An example of the importance of understanding causal relationships is given by Simpson’s Paradox &lt;span class="citation">(&lt;a href="#ref-simpson1951interpretation" role="doc-biblioref">Simpson 1951&lt;/a>)&lt;/span>, which describes a peculiar phenomenon that can present in data sets, where a correlation between two variables is present in one direction but reverses in each stratum of the data. The paradox expressed best through an example:
&lt;label for="tufte-mn-" class="margin-toggle">⊕&lt;/label>&lt;input type="checkbox" id="tufte-mn-" class="margin-toggle">&lt;span class="marginnote">This appears to suggest that the more someone exercises, the higher their cholesterol is! This is absurd!&lt;/span>
&lt;div class="figure">&lt;span id="fig:simpsons-before">&lt;/span>
&lt;img src="./index_files/figure-html/simpsons-before-1.png" alt="The results of an experiment, where x-axis represents how much exercise an individual does in hours, and y-axis represents cholestral measurment for the same individual." width="672" />
&lt;p class="caption">
Figure 1: The results of an experiment, where x-axis represents how much exercise an individual does in hours, and y-axis represents cholestral measurment for the same individual.
&lt;/p>
&lt;/div>
Figure &lt;a href="#fig:simpsons-before">1&lt;/a> shows a positive correlation in an experiment that measures individuals’ exercise per week and cholesterol. At first glance, this seems absurd, but when we partition the data by another causal variable, this seems reasonable:
&lt;div class="figure">&lt;span id="fig:simpsons-after">&lt;/span>
&lt;img src="index_files/figure-html/simpsons-after-1.png" alt="The same results as the experiment above, partioned by age" width="672" />
&lt;p class="caption">
Figure 2: The same results as the experiment above, partioned by age
&lt;/p>
&lt;/div>
&lt;p>&lt;label for="tufte-mn-" class="margin-toggle">⊕&lt;/label>&lt;input type="checkbox" id="tufte-mn-" class="margin-toggle">&lt;span class="marginnote">(Also note, we have fabricated the data, although these relationships are quite plausible)&lt;/span>
Understanding the full causal story is essential. Without an entire causal narrative, we might recommend inappropriate interventions; for example, a doctor might prescribe less exercise to reduce cholesterol in the case above.&lt;/p>
&lt;p>To deduce such causal stories, we need to apply the methodology of causal inference.&lt;/p>
&lt;/div>
&lt;div id="structural-equation-models-and-causal-graphs" class="section level2">
&lt;h2>Structural Equation Models and Causal Graphs&lt;/h2>
&lt;p>A structural equation model (SEM) is a set of equations representing the relationship between variables. For example, the equations which generated the data from &lt;a href="#simpsons">the Simpson’s paradox example&lt;/a>, are given as:
&lt;span class="math display">\[
\begin{align*}
age &amp;amp;= U_1 \\
exercise &amp;amp;= \frac{1}{13}*age + U_2 \\
cholesteral &amp;amp;= -4*exercise + age + U_3
\end{align*}
\]&lt;/span>
We can think of &lt;span class="math inline">\(U_1\)&lt;/span>, &lt;span class="math inline">\(U_2\)&lt;/span>, and &lt;span class="math inline">\(U_3\)&lt;/span> as specific unobserved exogenous variables of an individual, which generate their endogenous variables (something like error terms).&lt;/p>
&lt;p>A causal graph is a DAG which describes the existence of relationships between variables in a model. An edge &lt;code>x -&amp;gt; y&lt;/code> represents the relationship &lt;code>x&lt;/code> directly causes &lt;code>y&lt;/code>. Consequently, causal graphs can represent SEMs:
&lt;img src="index_files/figure-html/unnamed-chunk-1-1.png" width="672" />&lt;/p>
&lt;p>Indeed this graph shows how age confounds the effect of exercise on cholesterol.&lt;/p>
&lt;/div>
&lt;div id="do-calculus" class="section level2">
&lt;h2>Do-calculus&lt;/h2>
&lt;p>&lt;span class="citation">&lt;a href="#ref-pearl1995causal" role="doc-biblioref">Pearl&lt;/a> (&lt;a href="#ref-pearl1995causal" role="doc-biblioref">1995&lt;/a>)&lt;/span> outline a method to remove this confounding (and other similar scenarios) using do-calculus. Outlining the specifics of do-calculus is beyond the scope of this blog post (but for interested readers, we suggest &lt;span class="citation">(&lt;a href="#ref-pearl2016causal" role="doc-biblioref">Pearl, Glymour, and Jewell 2016&lt;/a>)&lt;/span>). In brief, do-calculus introduces the &lt;span class="math inline">\(do()\)&lt;/span> operator, which acts as an intervention and fixes a variable to a particular constant. For example, consider a similar binary situation to &lt;a href="#simpsons">the Simpson’s paradox example&lt;/a>, where &lt;em>exer&lt;/em> is a binary variable true if the individual is active, &lt;em>chol&lt;/em> is a binary variable true if the individual has high cholesterol, and &lt;em>age&lt;/em> is a binary variable true if the individual is over 60.&lt;/p>
&lt;pre class="r">&lt;code>bin_simpsons_data &amp;lt;- simpsons_data %&amp;gt;%
mutate(age = age &amp;gt; 60) %&amp;gt;% # Binarize the age, so those over 60 are True, and under 60 are False
mutate(exer = exercise&amp;gt;mean(exercise)) %&amp;gt;% # Binarize the exercise level, so those above the average are True, and under are False
mutate(chol = cholesteral&amp;gt;mean(cholesteral)) # Binarize the cholesteral level, so those above the average are True, and under are False&lt;/code>&lt;/pre>
&lt;p>We ask the same experimental question; does exercise reduce cholesterol. A naive approach would be to compute the effect as &lt;span class="math inline">\(P(chol | exer = 1) - P(chol | exer = 0)=\)&lt;/span> 0.168, where &lt;span class="math inline">\(P(chol | exer)\)&lt;/span> is computed by filtering the data according to &lt;em>exer&lt;/em>. Taking this approach, we would erroneously observe that the effect was positive since those who exercise more are also old and more likely to have high cholesterol.&lt;/p>
&lt;p>The experimental best practice approach would be to perform a randomized controlled trial (RCT). A random selection of individuals are assigned to &lt;em>do&lt;/em> a high exercise regiment and the others &lt;em>do&lt;/em> a low exercise regiment (regardless of age). The RCT implicitly removes the natural tendency of exercise to vary with age and allows researchers to observe the causal effect of exercise on cholesterol. When using data generated in such a fashion, increases/decreases in the probability of having high cholesterol caused by exercise are given by &lt;span class="math inline">\(P_{RCT}(chol | exer = 1) - P_{RCT}(chol | exer = 0)\)&lt;/span>. This metric is known as the Average Causal Effect (ACE), sometimes called the Average Treatment Effect. Note that by conditioning on &lt;span class="math inline">\(exer=x\)&lt;/span>, with data generated by an RCT, researchers are essentially limiting the data used to estimate &lt;span class="math inline">\(P_{RCT}(chol | exer = x)\)&lt;/span>, to individuals who were &lt;strong>forced&lt;/strong> to &lt;em>do&lt;/em> an exercise regiment &lt;span class="math inline">\(x\)&lt;/span>. The &lt;em>do&lt;/em> here represents forcing individuals to take an intervention value, regardless of their natural tendency, and this is captured by the &lt;span class="math inline">\(do()\)&lt;/span> operator. In this case, &lt;span class="math inline">\(P(chol | do(exer = x)) = P_{RCT}(chol | exer = x)\)&lt;/span>, since the data was generated with an RCT. However, RCTs can be prohibitively expensive (both in time and money) and might not be necessary to tease out a causal effect.&lt;/p>
&lt;p>We would still like to estimate the ACE, &lt;span class="math inline">\(P(chol | do(exer = 1)) - P(chol | do(exer = 0))\)&lt;/span>, by using data that wasn’t generated from an RCT. By using the &lt;span class="math inline">\(do()\)&lt;/span> operator here, we aim to disassociate &lt;em>exer&lt;/em> from its natural tendency with &lt;em>age&lt;/em> and effectively perform a graph surgery:&lt;/p>
&lt;p>&lt;img src="index_files/figure-html/unnamed-chunk-4-1.png" width="672" />&lt;/p>
&lt;p>&lt;span class="citation">&lt;a href="#ref-pearl2016causal" role="doc-biblioref">Pearl, Glymour, and Jewell&lt;/a> (&lt;a href="#ref-pearl2016causal" role="doc-biblioref">2016&lt;/a>)&lt;/span> provide an adjustment formula for just this scenario:
&lt;span class="math display">\[
P(y|do(x)) = \sum_z \frac{P(X=x, Y=y, PA=z)}{P(X=x| PA=z)}
\]&lt;/span>
where &lt;span class="math inline">\(X\)&lt;/span> represents the variable we are acting on, &lt;span class="math inline">\(Y\)&lt;/span> the variable we measure results from, and &lt;span class="math inline">\(PA\)&lt;/span> the parents of &lt;span class="math inline">\(X\)&lt;/span> and &lt;span class="math inline">\(Y\)&lt;/span> or more generally any nodes that satisfy the back-door criterion (which we will introduce later). Note this allows us to derive the causal effect, as if we had generated data with an RCT, using only probabilities estimated from data not generated by an RCT.&lt;/p>
&lt;p>As such we compute our ACE for the binary scenario:&lt;/p>
&lt;pre class="r">&lt;code># The Joint Distribution P(age, exer, chol) i.e. P(x,y,z)
p_aec &amp;lt;- bin_simpsons_data %&amp;gt;%
count(age, exer, chol) %&amp;gt;%
mutate(freq = n/sum(n))
# The Marginal Distribution P(age) i.e. P(z)
p_a &amp;lt;- bin_simpsons_data %&amp;gt;%
count(age) %&amp;gt;%
mutate(freq = n/sum(n))
# The Marginal Distribution P(age, exer) i.e. P(x, z)
p_ea &amp;lt;- bin_simpsons_data %&amp;gt;%
count(age, exer) %&amp;gt;%
mutate(freq = n/sum(n))
# The Conditional Mariginal Distribution P(exer | age) i.e. P(x | z)
p_e_a &amp;lt;- p_a %&amp;gt;%
right_join(p_ea, by=&amp;quot;age&amp;quot;) %&amp;gt;%
mutate(freq = freq.y/freq.x) %&amp;gt;%
select(age, exer, freq)
# The Intervention Distribution P(chol | do(exer)) i.e. P(y | do(x))
probabilities &amp;lt;- data.table(p_aec %&amp;gt;%
left_join(p_e_a, by=c(&amp;quot;age&amp;quot;, &amp;quot;exer&amp;quot;)) %&amp;gt;%
mutate(freq = freq.x/freq.y) %&amp;gt;%
select(age, exer, chol, freq) %&amp;gt;%
filter(chol) # We are only concerned with what cause high cholestral
)
# The average causal effect of exer on chol
ACE &amp;lt;- sum(probabilities[exer==T, freq]) - sum(probabilities[exer==F, freq]) &lt;/code>&lt;/pre>
&lt;p>This procedure leads to a negative ACE of -0.175, which shows the causal effect of going from high to low exercise on the probability of getting high cholesterol.&lt;/p>
&lt;p>A natural question that follows from this example is, under what conditions can we use such adjustments to achieve an identifiable causal effect.&lt;/p>
&lt;/div>
&lt;div id="d-seperation" class="section level2">
&lt;h2>d-seperation&lt;/h2>
&lt;p>To understand common scenarios where the effect of variable &lt;span class="math inline">\(X\)&lt;/span> on &lt;span class="math inline">\(Y\)&lt;/span> is identifiable within a causal graph, we must first introduce the concept of d-separation, also known as blocking. A pair of variable &lt;span class="math inline">\(X\)&lt;/span> and &lt;span class="math inline">\(Y\)&lt;/span> are said to be blocked if they are conditionally independent, given a set of nodes &lt;span class="math inline">\(Z\)&lt;/span>. There are three graph types, which are essential for blocking:&lt;/p>
&lt;p>&lt;img src="index_files/figure-html/unnamed-chunk-7-1.png" width="672" />&lt;/p>
&lt;p>In the chain scenario, &lt;span class="math inline">\(X \sim Y\)&lt;/span> is blocked by conditioning on &lt;span class="math inline">\(Z={M}\)&lt;/span>. This is sometimes refered to as the mediation scenario, which we will address further in &lt;a href="#front-door">the front-door criterion&lt;/a>.&lt;/p>
&lt;p>&lt;img src="index_files/figure-html/unnamed-chunk-8-1.png" width="672" />&lt;/p>
&lt;p>In the fork scenario, &lt;span class="math inline">\(X \sim Y\)&lt;/span> is blocked by conditioning on &lt;span class="math inline">\(Z={Z}\)&lt;/span>. This is sometimes refered to as the confounder scenario, which is the situation in &lt;a href="#simpsons">the simpson’s paradox example&lt;/a>.&lt;/p>
&lt;p>&lt;img src="index_files/figure-html/unnamed-chunk-9-1.png" width="672" />&lt;/p>
&lt;p>Finally, in the collider scenario, &lt;span class="math inline">\(X \sim Y\)&lt;/span> is blocked by &lt;em>not&lt;/em> conditioning on &lt;span class="math inline">\(Z={M}\)&lt;/span>. The idea that &lt;span class="math inline">\(X\)&lt;/span> and &lt;span class="math inline">\(Y\)&lt;/span>, which are independent, to begin with, can become conditionally dependant is unintuitive. One way to think about this is that we are sharing information received from $ Y $ with $ X $ through $ M $ when we condition on $ M $. For a more thorough investigation into this phenomenon, refer to &lt;span class="citation">(&lt;a href="#ref-pearl2016causal" role="doc-biblioref">Pearl, Glymour, and Jewell 2016&lt;/a>)&lt;/span>.&lt;/p>
&lt;p>A path is said to be blocked by &lt;span class="math inline">\(Z\)&lt;/span> if it contains a chain or fork with its middle node in &lt;span class="math inline">\(Z\)&lt;/span> or a collider with its middle node not in &lt;span class="math inline">\(Z\)&lt;/span>.&lt;/p>
&lt;p>We are now ready to introduce the main criteria for which we can perform adjustments.&lt;/p>
&lt;/div>
&lt;div id="the-backdoor" class="section level2">
&lt;h2>The Backdoor&lt;/h2>
&lt;div class="definition">
&lt;span id="def:unnamed-chunk-10" class="definition">&lt;strong>Definition 1 (The Backdoor Criterion) &lt;/strong>&lt;/span>A set of nodes &lt;span class="math inline">\(Z\)&lt;/span>, given a DAG &lt;span class="math inline">\(G\)&lt;/span> and a pair of nodes &lt;span class="math inline">\((X,Y)\)&lt;/span>, is said to satisfy the backdoor criterion if no node in &lt;span class="math inline">\(Z\)&lt;/span> is a descendant of &lt;span class="math inline">\(X\)&lt;/span>, and &lt;span class="math inline">\(Z\)&lt;/span> blocks all paths between &lt;span class="math inline">\(X\)&lt;/span> and &lt;span class="math inline">\(Y\)&lt;/span>, which contain arrows into &lt;span class="math inline">\(X\)&lt;/span>.
&lt;/div>
&lt;p>If there exists are set of nodes why satisfy the backdoor criterion, then the effect of &lt;span class="math inline">\(X\)&lt;/span> on &lt;span class="math inline">\(Y\)&lt;/span> is identifiable and given by:
&lt;span class="math display">\[
P(y|do(x)) = \sum_z \frac{P(X=x, Y=y, Z=z)}{P(X=x| Z=z)}
\]&lt;/span>&lt;/p>
&lt;p>The backdoor criterion stops undue influence through the &lt;em>backdoor&lt;/em> paths; it leaves direct paths between &lt;span class="math inline">\(X\)&lt;/span> and &lt;span class="math inline">\(Y\)&lt;/span>, and it blocks spurious paths.&lt;/p>
&lt;p>It is clear that { &lt;em>age&lt;/em> } satisfies these conditions to be a backdoor adjustment set in the example above.&lt;/p>
&lt;p>&lt;img src="index_files/figure-html/unnamed-chunk-11-1.png" width="672" />&lt;/p>
&lt;/div>
&lt;div id="front-door" class="section level2">
&lt;h2>The Front-door&lt;/h2>
&lt;p>There are notably common scenarios where this doesn’t work. For example, consider a constructed causal mediation situation, as follows:
&lt;img src="index_files/figure-html/unnamed-chunk-12-1.png" width="672" />&lt;/p>
&lt;p>In this case we cannot use the backdoor criterion, to detect the effect of &lt;em>smoking&lt;/em> on &lt;em>cancer&lt;/em> because &lt;em>tar&lt;/em> is a descendant of &lt;em>smoking&lt;/em>, and there exists no direct link between &lt;em>smoking&lt;/em> and &lt;em>cancer&lt;/em>. We must use instead the frontdoor criterion:&lt;/p>
&lt;div class="definition">
&lt;span id="def:unnamed-chunk-13" class="definition">&lt;strong>Definition 2 (The Frontdoor Criterion) &lt;/strong>&lt;/span>A set of nodes &lt;span class="math inline">\(Z\)&lt;/span>, given a DAG &lt;span class="math inline">\(G\)&lt;/span> and a pair of nodes &lt;span class="math inline">\((X,Y)\)&lt;/span>, is said to satisfy the frontdoor criterion if; &lt;span class="math inline">\(Z\)&lt;/span> intercepts all direct paths from &lt;span class="math inline">\(X\)&lt;/span> to &lt;span class="math inline">\(Y\)&lt;/span>, all paths between &lt;span class="math inline">\(X\)&lt;/span> and &lt;span class="math inline">\(Z\)&lt;/span> are blocked, and all backdoor paths between &lt;span class="math inline">\(Y\)&lt;/span> and &lt;span class="math inline">\(Z\)&lt;/span> are blocked by &lt;span class="math inline">\(X\)&lt;/span>.
&lt;/div>
&lt;p>If there exists are set of nodes &lt;span class="math inline">\(Z\)&lt;/span> which satisfy the frontdoor criterion, and &lt;span class="math inline">\(P(x, z)&amp;gt;0\)&lt;/span>, then the effect of &lt;span class="math inline">\(X\)&lt;/span> on &lt;span class="math inline">\(Y\)&lt;/span> is identifiable and given by:
&lt;span class="math display">\[
P(y|do(x)) = \sum_z P(z|x) \sum_{x^\prime} P(y|x^\prime, z)P(x^\prime)
\]&lt;/span>
In our smoking scenario, we see that by adjusting for &lt;em>tar&lt;/em> , we can observe the effect of &lt;em>smoking&lt;/em> on &lt;em>cancer&lt;/em>.&lt;/p>
&lt;/div>
&lt;div id="conclusion" class="section level2">
&lt;h2>Conclusion&lt;/h2>
&lt;p>The above briefly outlines a core motivation for studying causal inference and causal stories. We summarise some of the underlying theory of causal inference and show practical methodology through the &lt;em>frontdoor&lt;/em> and &lt;em>backdoor&lt;/em> criterion for determining causal effects through entirely observational studies.&lt;/p>
&lt;p>There are notable aspects of causal inference we have omitted from this taster. The most gaping is the lack of an explanation for the powerful tool of counterfactuals. We have only presented binary examples here (aside from our motivating example); however, perhaps the most common and useful causal inference application is to continuous examples using regression with linear models. Ultimately, we decided this was beyond causal inference taster’s scope and were more deserving of their own articles. Again, for the interested reader, we recommend &lt;span class="citation">&lt;a href="#ref-pearl2016causal" role="doc-biblioref">Pearl, Glymour, and Jewell&lt;/a> (&lt;a href="#ref-pearl2016causal" role="doc-biblioref">2016&lt;/a>)&lt;/span>, which adds links to many other resources.&lt;/p>
&lt;div id="refs" class="references csl-bib-body hanging-indent">
&lt;div id="ref-pearl1995causal" class="csl-entry">
Pearl, Judea. 1995. &lt;span>“Causal Diagrams for Empirical Research.”&lt;/span> &lt;em>Biometrika&lt;/em> 82 (4): 669–88.
&lt;/div>
&lt;div id="ref-pearl2016causal" class="csl-entry">
Pearl, Judea, Madelyn Glymour, and Nicholas P Jewell. 2016. &lt;em>Causal Inference in Statistics: A Primer&lt;/em>. John Wiley &amp;amp; Sons.
&lt;/div>
&lt;div id="ref-simpson1951interpretation" class="csl-entry">
Simpson, Edward H. 1951. &lt;span>“The Interpretation of Interaction in Contingency Tables.”&lt;/span> &lt;em>Journal of the Royal Statistical Society: Series B (Methodological)&lt;/em> 13 (2): 238–41.
&lt;/div>
&lt;/div>
&lt;/div></description></item></channel></rss>